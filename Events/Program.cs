using System;

namespace Events
{
    public delegate void EventDelegate();

    public class MyClass
    {

        //Создаем поле с именем myEvent типа класса EventDelegate,
        //но это не просто поле это событие и к делегату эта синтаксическая конструкция не имеет никакого отношения
        //Ключевое слово event создает другую сущность языка C#, а именно событие
        public event EventDelegate myEvent = null;

        /// <summary>
        /// Метод нужен для того чтобы мы могли из других классов запускать событие,
        /// то есть запускать все обработчики связанные с этим событием
        /// </summary>
        public void InvokeEvent()
        {
            myEvent.Invoke();
        }
    }

    public class Program
    {
        //Методы обработки события

        static private void Handler1()
        {
            Console.WriteLine("Обработчик события 1");
        }

        static private void Handler2()
        {
            Console.WriteLine("Обработчик события 2");
        }


        static void Main(string[] args)
        {
            //создаем экземпляр класса
            MyClass instance = new MyClass();


            //Подписка на событие

            /*подписываем на событие обработчики событий, методы, набор инструкций который должен выполнить копьютер при наступлении нужногои нам события на которые мы эти обработчики подписываем
              Для того чтобы подписать метод на событие мы должны создать экземпляр класса делегата, связать с этим делегатом метод и подписать делегат на нужное событие
              подписка производиться с помощью оператора +=
            */

            instance.myEvent += new EventDelegate(Handler1);


            /*Благодаря технике предположении делегата, можно не писать код создающий экземпляр класса делегата
              то есть, предпологается неявное наличие этого кода new EventDelegate(Handler2)
              Это тсделанно для того чтобы сделать работу с событиями более красивее, отвлеться от делегатов и не делать лишних действий
            */
            //подписываем метод Handler2 на событие myEvent
            instance.myEvent += Handler2;

            //Срабатывают все методы подписанные на событие myEvent
            instance.InvokeEvent();

            Console.WriteLine("---");

            //отписываем метод Handler2 от события myEvent
            instance.myEvent -= new EventDelegate(Handler2);

            instance.InvokeEvent();

            Console.ReadKey();
        }
    }
}

/*
 Событие и делегаты неделимы, для того чтобы создать событие, нужен делегат

Для создания события нужен делегат и переменная типа класса делегата помеченная ключевым словом event

События могут запускаться только из того класса которому они принадлежат

Подписаться в теме событий означает связать метод обработчика события с событием
 */