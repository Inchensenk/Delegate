using System;

namespace Delegate
{
    public delegate void MyDelegate();//создание делегата

    class SomeClass
    {
        public static void Method()
        {
            Console.WriteLine("Hello!");
        }

        public void HelloMethod()
        {
            Console.WriteLine("Hello!");
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            /*создаем экземпляр делегата и передаем в конструктор класса делегата метод класса SomeClass
            сообщаем экземпляр класса MyDelegate с методом Method
            Теперь когда мы обратимся к делегату у нас выполнится метод*/
            MyDelegate mD = new MyDelegate(SomeClass.Method);

            mD.Invoke();//запуск выполнения сообщеного метода

            mD();

            Console.ReadKey();
        }
    }
}

/*
  1) Делегат - это специальный обЪект, хранящий в себе  указател на метод.

  2)Делегат можно называть "класс-делегат"

  3) Экземпляр класса-делегата может ссылаться на любой статический или экземплярный метод, при условии, что их сигнатуры совпадают.

  4) Делегат - безопастный указатель на метод. 
     В классе-делегате строго указан тип возвращаемого значения метода, 
     с которым он может быть сообщен и принимаемые аргументы.
     (Сигнатура делегата должна совпадать с сигнатурой метода, сообщаемый с ним)

4.1) Делегат - Это специальный объект, который содержит в себе указатель на первый адрес байта, с которого начинается метод в памяти.
    модификатор_доступа delegate возвращаемое_значение Имя(тип имя_параметра, ...);

  5) Все делегаты являются производными от абстрактного класса MulticastDelegate,
     который, в свою очередь, наследует абстрактный класс Delegate

  6) Экземпляр делегата Имя_типа сообщается с методом Имя_метода.
 */